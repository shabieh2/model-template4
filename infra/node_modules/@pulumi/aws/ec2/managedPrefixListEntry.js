"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedPrefixListEntry = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a managed prefix list entry resource.
 *
 * > **NOTE on Managed Prefix Lists and Managed Prefix List Entries:** The provider
 * currently provides both a standalone Managed Prefix List Entry resource (a single entry),
 * and a Managed Prefix List resource with entries defined
 * in-line. At this time you cannot use a Managed Prefix List with in-line rules in
 * conjunction with any Managed Prefix List Entry resources. Doing so will cause a conflict
 * of entries and will overwrite entries.
 *
 * > **NOTE on Managed Prefix Lists with many entries:**  To improved execution times on larger
 * updates, if you plan to create a prefix list with more than 100 entries, it is **recommended**
 * that you use the inline `entry` block as part of the Managed Prefix List resource
 * resource instead.
 *
 * ## Example Usage
 *
 * Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.ManagedPrefixList("example", {
 *     addressFamily: "IPv4",
 *     maxEntries: 5,
 *     tags: {
 *         Env: "live",
 *     },
 * });
 * const entry1 = new aws.ec2.ManagedPrefixListEntry("entry1", {
 *     cidr: aws_vpc.example.cidr_block,
 *     description: "Primary",
 *     prefixListId: example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Prefix List Entries can be imported using the `prefix_list_id` and `cidr` separated by a `,`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry default pl-0570a1d2d725c16be,10.0.3.0/24
 * ```
 */
class ManagedPrefixListEntry extends pulumi.CustomResource {
    /**
     * Get an existing ManagedPrefixListEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedPrefixListEntry(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedPrefixListEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedPrefixListEntry.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["prefixListId"] = state ? state.prefixListId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.prefixListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixListId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["prefixListId"] = args ? args.prefixListId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedPrefixListEntry.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ManagedPrefixListEntry = ManagedPrefixListEntry;
/** @internal */
ManagedPrefixListEntry.__pulumiType = 'aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry';
//# sourceMappingURL=managedPrefixListEntry.js.map